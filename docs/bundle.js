!function(e){var t={};function a(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,a),i.l=!0,i.exports}a.m=e,a.c=t,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)a.d(n,i,function(t){return e[t]}.bind(null,i));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=0)}([function(e,t,a){"use strict";a.r(t);var n={term:[{id:0,name:"custom"},{id:1,name:"today"},{id:2,name:"last 7 days"},{id:3,name:"last 30 days"},{id:4,name:"last 90 days"}],zones:[{id:-12,name:"(UTC-12:00) International Date Line West"},{id:-11,name:"(UTC-11:00) Coordinated Universal Time-11"},{id:-10,name:"(UTC-10:00) Hawaii"},{id:-9,name:"(UTC-09:00) Alaska"},{id:-8,name:"(UTC-08:00) Baja California"},{id:-8,name:"(UTC-08:00) Pacific Time (US & Canada)"},{id:-7,name:"(UTC-07:00) Arizona"},{id:-7,name:"(UTC-07:00) Chihuahua, La Paz, Mazatlan"},{id:-7,name:"(UTC-07:00) Mountain Time (US & Canada)"},{id:-6,name:"(UTC-06:00) Central America"},{id:-6,name:"(UTC-06:00) Central Time (US & Canada)"},{id:-6,name:"(UTC-06:00) Guadalajara, Mexico City, Monterrey"},{id:-6,name:"(UTC-06:00) Saskatchewan"},{id:-5,name:"(UTC-05:00) Bogota, Lima, Quito"},{id:-5,name:"(UTC-05:00) Eastern Time (US & Canada)"},{id:-5,name:"(UTC-05:00) Indiana (East)"},{id:-4.5,name:"(UTC-04:30) Caracas"},{id:-4,name:"(UTC-04:00) Asuncion"},{id:-4,name:"(UTC-04:00) Atlantic Time (Canada)"},{id:-4,name:"(UTC-04:00) Cuiaba"},{id:-4,name:"(UTC-04:00) Georgetown, La Paz, Manaus, San Juan"},{id:-4,name:"(UTC-04:00) Santiago"},{id:-3.5,name:"(UTC-03:30) Newfoundland"},{id:-3,name:"(UTC-03:00) Brasilia"},{id:-3,name:"(UTC-03:00) Buenos Aires"},{id:-3,name:"(UTC-03:00) Cayenne, Fortaleza"},{id:-3,name:"(UTC-03:00) Greenland"},{id:-3,name:"(UTC-03:00) Montevideo"},{id:-3,name:"(UTC-03:00) Salvador"},{id:-2,name:"(UTC-02:00) Coordinated Universal Time-02"},{id:-2,name:"(UTC-02:00) Mid-Atlantic - Old"},{id:-1,name:"(UTC-01:00) Azores"},{id:-1,name:"(UTC-01:00) Cape Verde Is."},{id:0,name:"(UTC) Coordinated Universal Time"},{id:0,name:"(UTC) Edinburgh, London"},{id:1,name:"(UTC+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna"},{id:1,name:"(UTC+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague"},{id:1,name:"(UTC+01:00) Brussels, Copenhagen, Madrid, Paris"},{id:1,name:"(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb"},{id:1,name:"(UTC+01:00) West Central Africa"},{id:1,name:"(UTC+01:00) Windhoek"},{id:2,name:"(UTC+02:00) Athens, Bucharest"},{id:2,name:"(UTC+02:00) Beirut"},{id:2,name:"(UTC+02:00) Cairo"},{id:2,name:"(UTC+02:00) Damascus"},{id:2,name:"(UTC+02:00) E. Europe"},{id:2,name:"(UTC+02:00) Harare, Pretoria"},{id:2,name:"(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius"},{id:3,name:"(UTC+03:00) Istanbul"},{id:2,name:"(UTC+02:00) Jerusalem"},{id:2,name:"(UTC+02:00) Tripoli"},{id:3,name:"(UTC+03:00) Amman"},{id:3,name:"(UTC+03:00) Baghdad"},{id:3,name:"(UTC+03:00) Kaliningrad, Minsk"},{id:3,name:"(UTC+03:00) Kuwait, Riyadh"},{id:3,name:"(UTC+03:00) Nairobi"},{id:3,name:"(UTC+03:00) Moscow, St. Petersburg, Volgograd"},{id:4,name:"(UTC+04:00) Samara, Ulyanovsk, Saratov"},{id:3.5,name:"(UTC+03:30) Tehran"},{id:4,name:"(UTC+04:00) Abu Dhabi, Muscat"},{id:4,name:"(UTC+04:00) Baku"},{id:4,name:"(UTC+04:00) Port Louis"},{id:4,name:"(UTC+04:00) Tbilisi"},{id:4,name:"(UTC+04:00) Yerevan"},{id:4.5,name:"(UTC+04:30) Kabul"},{id:5,name:"(UTC+05:00) Ashgabat, Tashkent"},{id:5,name:"(UTC+05:00) Yekaterinburg"},{id:5,name:"(UTC+05:00) Islamabad, Karachi"},{id:5.5,name:"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi"},{id:5.5,name:"(UTC+05:30) Sri Jayawardenepura"},{id:5.75,name:"(UTC+05:45) Kathmandu"},{id:6,name:"(UTC+06:00) Astana"},{id:6,name:"(UTC+06:00) Dhaka"},{id:6.5,name:"(UTC+06:30) Yangon (Rangoon)"},{id:7,name:"(UTC+07:00) Bangkok, Hanoi, Jakarta"},{id:7,name:"(UTC+07:00) Novosibirsk"},{id:8,name:"(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi"},{id:8,name:"(UTC+08:00) Krasnoyarsk"},{id:8,name:"(UTC+08:00) Kuala Lumpur, Singapore"},{id:8,name:"(UTC+08:00) Perth"},{id:8,name:"(UTC+08:00) Taipei"},{id:8,name:"(UTC+08:00) Ulaanbaatar"},{id:9,name:"(UTC+09:00) Irkutsk"},{id:9,name:"(UTC+09:00) Osaka, Sapporo, Tokyo"},{id:9,name:"(UTC+09:00) Seoul"},{id:9.5,name:"(UTC+09:30) Adelaide"},{id:9.5,name:"(UTC+09:30) Darwin"},{id:10,name:"(UTC+10:00) Brisbane"},{id:10,name:"(UTC+10:00) Canberra, Melbourne, Sydney"},{id:10,name:"(UTC+10:00) Guam, Port Moresby"},{id:10,name:"(UTC+10:00) Hobart"},{id:10,name:"(UTC+10:00) Yakutsk"},{id:11,name:"(UTC+11:00) Solomon Is., New Caledonia"},{id:11,name:"(UTC+11:00) Vladivostok"},{id:12,name:"(UTC+12:00) Auckland, Wellington"},{id:12,name:"(UTC+12:00) Coordinated Universal Time+12"},{id:12,name:"(UTC+12:00) Fiji"},{id:12,name:"(UTC+12:00) Magadan"},{id:12,name:"(UTC+12:00) Petropavlovsk-Kamchatsky - Old"},{id:14,name:"(UTC+14:00) Samoa"}]};customElements.define("date-range",class extends HTMLElement{static get observedAttributes(){return["opened","from","to"]}constructor(){super()}connectedCallback(){this.dateFrom=new Date,this.dateTo=new Date;let e=`${i(this.dateFrom)} ${this.dateFrom.getDate()}`;this.innerHTML=`\n        <div class="head"><span class="from">${e}</span> - <span class="to">${e}</span></div>\n        <div class="content">\n            <div class="select-wrapper">\n                <custom-select data-arr="term"></custom-select>\n            </div>\n            <div class="select-wrapper">\n                <custom-select data-arr="zones"></custom-select>\n            </div>\n            <div class="range-wrapper">\n                <label>From:\n                    <date-picker class="datepicker" data-type="from" ></date-picker>\n                </label>\n                <label>To:\n                    <date-picker class="datepicker" data-type="to" ></date-picker>\n                </label>\n            </div>\n            <div class="buttons">\n                <button class="cancel">Cancel</button>\n                <button class="apply">Apply</button>\n            </div>\n        </div>\n    `,this.init()}changeDateOnCalendar(e){let t=i(e.detail.date),a=e.detail.type;document.querySelector(`.head .${a}`).innerText=`${t} ${e.detail.day}`,e.stopPropagation()}setIntervals(e,t){if(e.stopPropagation(),"zones"===e.detail.type)return;let a=new Date;switch(+e.detail.id){case 0:break;case 1:t.dateFrom=a,t.dateTo=new Date;break;case 2:t.dateFrom=new Date(a.getFullYear(),a.getMonth(),a.getDate()-7),t.dateTo=new Date;break;case 3:t.dateFrom=new Date(a.getFullYear(),a.getMonth(),a.getDate()-30),t.dateTo=new Date;break;case 4:t.dateFrom=new Date(a.getFullYear(),a.getMonth(),a.getDate()-90),t.dateTo=new Date}let n=t.parentElement.parentElement.querySelector(".datepicker[data-type=from]"),i=t.parentElement.parentElement.querySelector(".datepicker[data-type=to]");n.dataset.val=t.dateFrom.valueOf(),i.dataset.val=t.dateTo.valueOf();let d=new CustomEvent("custom",{detail:{date:t.dateFrom,day:t.dateFrom.getDate(),type:"from"},bubbles:!0}),s=new CustomEvent("custom",{detail:{date:t.dateTo,day:t.dateTo.getDate(),type:"to"},bubbles:!0});t.changeDateOnCalendar(d),t.changeDateOnCalendar(s)}get opened(){return null!==this.getAttribute("opened")}set opened(e){e?this.setAttribute("opened",""):this.removeAttribute("opened")}attributeChangedCallback(e,t,a){switch(e){case"opened":break;case"from":console.log("from",a);break;case"to":console.log("to",a)}}sendEvent(e,t){let a=new CustomEvent("change",{detail:{from:new Date(e),to:new Date(t)},bubbles:!0});this.dispatchEvent(a)}init(){let e=document.querySelectorAll("date-picker");for(let t=0;t<e.length;t++)e[t].addEventListener("change",this.changeDateOnCalendar);let t=document.querySelectorAll("custom-select");for(let a=0;a<e.length;a++)t[a].addEventListener("change",e=>{this.setIntervals(e,this)});let a=document.querySelectorAll(".buttons .cancel");for(let e=0;e<a.length;e++)a[e].onclick=(e=>{this.opened=!1});let n=document.querySelectorAll(".buttons .apply");for(let e=0;e<n.length;e++)n[e].onclick=(e=>{let t=this.querySelector('date-picker[data-type="from"]'),a=this.querySelector('date-picker[data-type="to"]'),n=this.querySelector('custom-select[data-arr="zones"]'),i=t.dataset.val,d=a.dataset.val,s=1e3*n.dataset.val*60*60;i=+i+s,d=+d+s,this.dataset.from=i,this.dataset.to=d,this.sendEvent(i,d),this.opened=!1})}});customElements.define("custom-select",class extends HTMLElement{constructor(){super()}connectedCallback(){const e=this.dataset.arr,t=document.createElement("DIV");t.innerText=n[e][0].name,t.classList.add("select-selected"),this.appendChild(t);let a=document.createElement("DIV");a.classList.add("select-items"),a.classList.add("select-hide");for(let t=0;t<n[e].length;t++){let i=document.createElement("DIV");i.innerHTML=n[e][t].name,i.dataset.val=n[e][t].id,a.appendChild(i)}if(a.addEventListener("click",function(a){t.innerText=a.target.innerText;let n=this.getElementsByTagName("div");for(let e=0;e<n.length;e++)n[e].removeAttribute("class");a.target.classList.add("same-as-selected");let i=new CustomEvent("change",{detail:{id:a.target.dataset.val,name:a.target.innerText,type:e},bubbles:!0});this.parentElement.dataset.val=a.target.dataset.val,this.dispatchEvent(i)}),this.appendChild(a),a.style.width=(t.getBoundingClientRect().width||478)+"px",t.addEventListener("click",function(e){e.stopPropagation(),document.onclick&&document.onclick(this),document.onclick=i,this.nextSibling.classList.toggle("select-hide"),this.classList.toggle("select-elem")}),"zones"===e){let i,d,s=(new Date).getTimezoneOffset()/-60;i=n[e].find(e=>e.id===s),t.innerText=i.name,this.dataset.val=i.id,(d=[...a.getElementsByTagName("div")].find(e=>e.dataset.val==s)).classList.add("same-as-selected")}function i(e){let t,a,n=[];t=document.getElementsByClassName("select-items"),a=document.getElementsByClassName("select-selected");for(let t=0;t<a.length;t++)e==a[t]?n.push(t):a[t].classList.remove("select-elem");for(let e=0;e<t.length;e++)n.indexOf(e)&&t[e].classList.add("select-hide")}}});function i(e){return["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][e.getMonth()]}function d(e){return["January","February","March","April","May","June","July","August","September","October","November","December"][e.getMonth()]}customElements.define("date-picker",class extends HTMLElement{static get observedAttributes(){return["data-val"]}constructor(){super(),this.date=new Date}connectedCallback(){this.innerHTML='\n                    <div class="currentElem"></div>\n                    <div class="date-wrapper date-hide">\n                        <div class="arrow prev"> < </div>\n                        <div class="arrow next"> > </div>\n                        <div class="date-title"></div>\n                        <div class="days-name-wrap">\n                            <div>SU</div>\n                            <div>MO</div>\n                            <div>TU</div>\n                            <div>WE</div>\n                            <div>TH</div>\n                            <div>FR</div>\n                            <div>SA</div>\n                        </div>\n                        <div class="days-wrapper">\n                        </div>\n                    </div>',this.init()}renderMonthData(e){let t=[],a=e.getFullYear(),n=e.getMonth(),i=new Date(a,n,1),d=new Date(a,n+1,0),s=new Date(a,n,0);for(let e=i.getDay(),a=1;a<=d.getDate();e++,a++)t[e]={active:!0,val:a};for(let e=d.getDate()+i.getDay(),a=1;e<42;e++,a++)t[e]={active:!1,val:a};for(let e=i.getDay()-1,a=s.getDate();e>=0;e--,a--)t[e]={active:!1,val:a};return t}prevMonth(e){let t=e.getFullYear(),a=e.getMonth();return new Date(t,a,0)}nextMonth(e){let t=e.getFullYear(),a=e.getMonth();return new Date(t,a+1,1)}drawDays(e=new Date){let t=this.renderMonthData(e),a=this.getElementsByClassName("days-wrapper")[0];a.innerHTML="",this.drawTitle(e);let n=document.createDocumentFragment();for(let e=0;e<t.length;e++){let a=document.createElement("div");a.innerText=t[e].val,t[e].active&&a.classList.add("active"),n.appendChild(a)}a.appendChild(n)}drawTitle(e){this.getElementsByClassName("date-title")[0].innerText=`${d(e)} - ${e.getFullYear()}`}drawCurrentTitle(e){this.querySelector(".currentElem").innerText=`${d(this.date)} ${e}, ${this.date.getFullYear().toString().slice(-2)}`}closeAllSelect(e){let t,a,n=[];t=document.getElementsByClassName("date-wrapper"),a=document.getElementsByClassName("currentElem");for(let t=0;t<a.length;t++)e==a[t]?n.push(t):a[t].classList.remove("select-elem");for(let e=0;e<t.length;e++)n.indexOf(e)&&t[e].classList.add("date-hide")}sendEvent(){let e=new CustomEvent("change",{detail:{day:this.date.getDate(),date:this.date,type:this.type},bubbles:!0});this.dataset.val=this.date.valueOf(),this.dispatchEvent(e)}init(){this.type=this.dataset.type,this.drawDays(this.date),this.drawCurrentTitle(this.date.getDate()),this.querySelector(".prev").addEventListener("click",e=>{this.date=this.prevMonth(this.date),this.drawDays(this.date),e.stopPropagation()}),this.querySelector(".next").addEventListener("click",e=>{this.date=this.nextMonth(this.date),this.drawDays(this.date),e.stopPropagation()}),this.querySelector(".currentElem").addEventListener("click",e=>{document.onclick&&document.onclick(this),document.onclick=this.closeAllSelect,e.target.classList.toggle("select-elem"),e.target.nextElementSibling.classList.toggle("date-hide"),e.stopPropagation()}),this.querySelector(".days-wrapper").addEventListener("click",e=>{e.stopPropagation(),e.target.classList.contains("active")&&([...this.querySelectorAll(".days-wrapper div")].forEach(e=>{e.classList.remove("selected")}),e.target.classList.add("selected"),this.drawCurrentTitle(e.target.innerText),this.date.setDate(e.target.innerText),this.sendEvent(),this.closeAllSelect())}),this.sendEvent()}attributeChangedCallback(e,t,a){switch(e){case"data-val":let t=new Date(+this.dataset.val);this.date.getMonth()!==t.getMonth()?(this.date=new Date(+this.dataset.val),this.drawDays(this.date)):this.date=new Date(+this.dataset.val),this.drawCurrentTitle(this.date.getDate())}}}),console.log("loaded"),window.onload=(()=>{document.getElementById("btn").addEventListener("click",e=>{let t=document.querySelector("date-range");t.opened=!t.opened}),document.body.addEventListener("change",e=>{console.log(e.detail);let t=document.querySelector(".from-text"),a=document.querySelector(".to-text");t.innerText=e.detail.from.toLocaleString(),a.innerText=e.detail.to.toLocaleString()})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,